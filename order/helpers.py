
from email.mime import message
import logging

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer

from django.utils import timezone
from order.push_notifications.services import send_notification

logger = logging.getLogger(__name__)
channel_layer = get_channel_layer()

def edit_msg(telegram_id, text, status, last_mid):

    async_to_sync(channel_layer.send)(
        "telegram-notify",
        {
            "type": "edit_message",
            "telegram_id_str": telegram_id,
            "text": text,
            "status": status,
            "last_mid": last_mid,
        },
    )

def send_msg(telegram_id, text, order_id, status, last_mid):
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.send)(
        "telegram-notify",
        {
            "type": "send_message",
            "telegram_id_str": telegram_id,
            "text": text,
            "order_id": order_id,
            "status": status,
            "last_mid": last_mid,
        },
    )

def send_message(order, action, preparing_time=0, error=None):
    msg = ""
    message = getattr(order, "message", None)
    if not message:
        last_id = [None, None]
    else:
        last_id = [order.message.message_id, order.message.message_id2]
        msg = order.message.text

    ico = {"car": "üöô", "scooter": "üõµ", "foot": "üö∂‚Äç‚ôÇÔ∏è"}
    types = {"car": "üöô –º–∞—à–∏–Ω–∞", "scooter": "üõµ —Å–∫—É—Ç–µ—Ä", "foot": "üö∂‚Äç‚ôÇÔ∏è –ø–µ—à–∫–æ–º"}
    
    courier = order.courier
    
    group = order.item_groups.first()
    telegram_id = group.institution_branch.telegram_id_str
    text = None
    if action == "payme_error":
        if msg is not None:
            text = msg.rstrip("\n") + f"\n<b>‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n{preparing_time}"
            edit_msg(telegram_id, text, "payme_error", last_id)
            logger.info(f"Payme error message edited for order {order.id}")
        return
    
    if action == "accepted" and preparing_time > 0:
        if msg is not None:
            text = msg.rstrip("\n") + f"\n‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç</b>\n‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: <b>{preparing_time} –º–∏–Ω</b>"
            edit_msg(telegram_id, text, "accepted", last_id)
            logger.info(f"Accepted message edited for order {order.id}")
        return
    
    if action == "incident":
        if msg is not None:
            text = msg.rstrip("\n") + f"\n<b>‚ùóÔ∏è –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ</b>"
            edit_msg(telegram_id, text, "incident", last_id)
            logger.info(f"Incident message edited for order {order.id}")
        return
    
    if courier:
        courier_info = types[courier.transport]
        order.timeline.preparing_start_at = timezone.now()
        order.timeline.save()
    

    if action in ("courier", "change_courier"):

        if courier:
            if not courier.transport:
                logger.warning(f"Courier transport type missing for order {order.id}")
                return
            courier_info = types.get(courier.transport, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            transport_icon = ico.get(courier.transport, "")

            send_notification(
                order.id,
                f"–ù–∞ –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä",
                f"–ö –∑–∞–∫–∞–∑—É ‚Ññ{order.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            )

            order.timeline.preparing_start_at = timezone.now()
            order.timeline.save()
            courier_detail = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ:</b>\n"
                f"–ò–º—è: {courier.user.first_name}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{courier.user.phone_number.replace('+','')}\n"
                f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {courier_info}"
            )

        if action == "courier":
            title = f"<b>{transport_icon} –ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å.\n\n"
        elif action == "change_courier":
            if not courier:
                logger.warning(f"Courier not found for order {order.id}")
                title = f"<b>–ö—É—Ä—å–µ—Ä —Å–Ω—è—Ç —Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}</b>\n\n"
                action = "courier_removed"
            else:
                title = f"<b>{transport_icon} –ö—É—Ä—å–µ—Ä –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑ ‚Ññ{order.id}\n\n"
            

        if courier and courier_detail:
            text = title + courier_detail
        else:
            text = title
        
    elif action == "cancel":
        if msg:
            edited_msg = msg.rstrip("\n") + f"\n<b>‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>."
            edit_msg(telegram_id, edited_msg, action, last_id)
        text = f"<b>‚ùå –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ç–º–µ–Ω–µ–Ω</b>."

    if text:
        send_msg(telegram_id, text, order.id, action, last_id)
        logger.info(f"Message sent to Telegram for order {order.id} with status '{action}'")
    else:
        logger.warning(f"No message text generated for action '{action}' on order {order.id}")

    

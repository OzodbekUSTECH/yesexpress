services:
  # База данных PostgreSQL
  postgis:
    image: postgis/postgis:17-3.5-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgis_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Redis для кеширования и Celery
  redis:
    image: redis:8-alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Основной API сервер (Gunicorn)
  api:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: ./entrypoint.sh
    networks:
      - app-network

  # WebSocket сервер (Daphne)
  websocket:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: ./entrypoint_asgi.sh
    networks:
      - app-network

  # Django Channels Consumers
  consumers:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: ./entrypoint_consumers.sh
    networks:
      - app-network

  # Telegram Bot
  telegram_bot:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: uv run manage.py startbot
    networks:
      - app-network

  # Celery Worker
  celery_worker:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: uv run celery -A tuktuk worker --loglevel=info
    networks:
      - app-network

  # Celery Beat (Scheduler)
  celery_beat:
    build: .
    restart: always
    depends_on:
      postgis:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    command: uv run celery -A tuktuk beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - websocket
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./logs/nginx:/var/log/nginx
    networks:
      - app-network

volumes:
  postgis_data:
  redis_data:

networks:
  app-network:
    driver: bridge
